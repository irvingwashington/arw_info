use std::collections::HashMap;
use std::fmt;

#[derive(Clone)]
pub struct Tag {
    pub id: u16,
    pub label: String,
    pub description: String,
}

impl fmt::Display for Tag {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.label)
    }
}

// Auto-generated code below
// 2016-12-01 22:45:53 +0100

lazy_static! {
    pub static ref TAGS : HashMap<u16, Tag> = {
        let mut m = HashMap::new();
        m.insert(254, Tag {id: 254, label: String::from("NewSubfileType"), description: String::from("A general indication of the kind of data contained in this subfile.")});
        m.insert(255, Tag {id: 255, label: String::from("SubfileType"), description: String::from("A general indication of the kind of data contained in this subfile.")});
        m.insert(256, Tag {id: 256, label: String::from("ImageWidth"), description: String::from("The number of columns in the image, i.e., the number of pixels per row.")});
        m.insert(257, Tag {id: 257, label: String::from("ImageLength"), description: String::from("The number of rows of pixels in the image.")});
        m.insert(258, Tag {id: 258, label: String::from("BitsPerSample"), description: String::from("Number of bits per component.")});
        m.insert(259, Tag {id: 259, label: String::from("Compression"), description: String::from("Compression scheme used on the image data.")});
        m.insert(262, Tag {id: 262, label: String::from("PhotometricInterpretation"), description: String::from("The color space of the image data.")});
        m.insert(263, Tag {id: 263, label: String::from("Threshholding"), description: String::from("For black and white TIFF files that represent shades of gray, the technique used to convert from gray to black and white pixels.")});
        m.insert(264, Tag {id: 264, label: String::from("CellWidth"), description: String::from("The width of the dithering or halftoning matrix used to create a dithered or halftoned bilevel file.")});
        m.insert(265, Tag {id: 265, label: String::from("CellLength"), description: String::from("The length of the dithering or halftoning matrix used to create a dithered or halftoned bilevel file.")});
        m.insert(266, Tag {id: 266, label: String::from("FillOrder"), description: String::from("The logical order of bits within a byte.")});
        m.insert(270, Tag {id: 270, label: String::from("ImageDescription"), description: String::from("A string that describes the subject of the image.")});
        m.insert(271, Tag {id: 271, label: String::from("Make"), description: String::from("The scanner manufacturer.")});
        m.insert(272, Tag {id: 272, label: String::from("Model"), description: String::from("The scanner model name or number.")});
        m.insert(273, Tag {id: 273, label: String::from("StripOffsets"), description: String::from("For each strip, the byte offset of that strip.")});
        m.insert(274, Tag {id: 274, label: String::from("Orientation"), description: String::from("The orientation of the image with respect to the rows and columns.")});
        m.insert(277, Tag {id: 277, label: String::from("SamplesPerPixel"), description: String::from("The number of components per pixel.")});
        m.insert(278, Tag {id: 278, label: String::from("RowsPerStrip"), description: String::from("The number of rows per strip.")});
        m.insert(279, Tag {id: 279, label: String::from("StripByteCounts"), description: String::from("For each strip, the number of bytes in the strip after compression.")});
        m.insert(280, Tag {id: 280, label: String::from("MinSampleValue"), description: String::from("The minimum component value used.")});
        m.insert(281, Tag {id: 281, label: String::from("MaxSampleValue"), description: String::from("The maximum component value used.")});
        m.insert(282, Tag {id: 282, label: String::from("XResolution"), description: String::from("The number of pixels per ResolutionUnit in the ImageWidth direction.")});
        m.insert(283, Tag {id: 283, label: String::from("YResolution"), description: String::from("The number of pixels per ResolutionUnit in the ImageLength direction.")});
        m.insert(284, Tag {id: 284, label: String::from("PlanarConfiguration"), description: String::from("How the components of each pixel are stored.")});
        m.insert(288, Tag {id: 288, label: String::from("FreeOffsets"), description: String::from("For each string of contiguous unused bytes in a TIFF file, the byte offset of the string.")});
        m.insert(289, Tag {id: 289, label: String::from("FreeByteCounts"), description: String::from("For each string of contiguous unused bytes in a TIFF file, the number of bytes in the string.")});
        m.insert(290, Tag {id: 290, label: String::from("GrayResponseUnit"), description: String::from("The precision of the information contained in the GrayResponseCurve.")});
        m.insert(291, Tag {id: 291, label: String::from("GrayResponseCurve"), description: String::from("For grayscale data, the optical density of each possible pixel value.")});
        m.insert(296, Tag {id: 296, label: String::from("ResolutionUnit"), description: String::from("The unit of measurement for XResolution and YResolution.")});
        m.insert(305, Tag {id: 305, label: String::from("Software"), description: String::from("Name and version number of the software package(s) used to create the image.")});
        m.insert(306, Tag {id: 306, label: String::from("DateTime"), description: String::from("Date and time of image creation.")});
        m.insert(315, Tag {id: 315, label: String::from("Artist"), description: String::from("Person who created the image.")});
        m.insert(316, Tag {id: 316, label: String::from("HostComputer"), description: String::from("The computer and/or operating system in use at the time of image creation.")});
        m.insert(320, Tag {id: 320, label: String::from("ColorMap"), description: String::from("A color map for palette color images.")});
        m.insert(338, Tag {id: 338, label: String::from("ExtraSamples"), description: String::from("Description of extra components.")});
        m.insert(33432, Tag {id: 33432, label: String::from("Copyright"), description: String::from("Copyright notice.")});
        m.insert(269, Tag {id: 269, label: String::from("DocumentName"), description: String::from("The name of the document from which this image was scanned.")});
        m.insert(285, Tag {id: 285, label: String::from("PageName"), description: String::from("The name of the page from which this image was scanned.")});
        m.insert(286, Tag {id: 286, label: String::from("XPosition"), description: String::from("X position of the image.")});
        m.insert(287, Tag {id: 287, label: String::from("YPosition"), description: String::from("Y position of the image.")});
        m.insert(292, Tag {id: 292, label: String::from("T4Options"), description: String::from("Options for Group 3 Fax compression")});
        m.insert(293, Tag {id: 293, label: String::from("T6Options"), description: String::from("Options for Group 4 Fax compression")});
        m.insert(297, Tag {id: 297, label: String::from("PageNumber"), description: String::from("The page number of the page from which this image was scanned.")});
        m.insert(301, Tag {id: 301, label: String::from("TransferFunction"), description: String::from("Describes a transfer function for the image in tabular style.")});
        m.insert(317, Tag {id: 317, label: String::from("Predictor"), description: String::from("A mathematical operator that is applied to the image data before an encoding scheme is applied.")});
        m.insert(318, Tag {id: 318, label: String::from("WhitePoint"), description: String::from("The chromaticity of the white point of the image.")});
        m.insert(319, Tag {id: 319, label: String::from("PrimaryChromaticities"), description: String::from("The chromaticities of the primaries of the image.")});
        m.insert(321, Tag {id: 321, label: String::from("HalftoneHints"), description: String::from("Conveys to the halftone function the range of gray levels within a colorimetrically-specified image that should retain tonal detail.")});
        m.insert(322, Tag {id: 322, label: String::from("TileWidth"), description: String::from("The tile width in pixels. This is the number of columns in each tile.")});
        m.insert(323, Tag {id: 323, label: String::from("TileLength"), description: String::from("The tile length (height) in pixels. This is the number of rows in each tile.")});
        m.insert(324, Tag {id: 324, label: String::from("TileOffsets"), description: String::from("For each tile, the byte offset of that tile, as compressed and stored on disk.")});
        m.insert(325, Tag {id: 325, label: String::from("TileByteCounts"), description: String::from("For each tile, the number of (compressed) bytes in that tile.")});
        m.insert(326, Tag {id: 326, label: String::from("BadFaxLines"), description: String::from("Used in the TIFF-F standard, denotes the number of 'bad' scan lines encountered by the facsimile device.")});
        m.insert(327, Tag {id: 327, label: String::from("CleanFaxData"), description: String::from("Used in the TIFF-F standard, indicates if 'bad' lines encountered during reception are stored in the data, or if 'bad' lines have been replaced by the receiver.")});
        m.insert(328, Tag {id: 328, label: String::from("ConsecutiveBadFaxLines"), description: String::from("Used in the TIFF-F standard, denotes the maximum number of consecutive 'bad' scanlines received.")});
        m.insert(330, Tag {id: 330, label: String::from("SubIFDs"), description: String::from("Offset to child IFDs.")});
        m.insert(332, Tag {id: 332, label: String::from("InkSet"), description: String::from("The set of inks used in a separated (PhotometricInterpretation=5) image.")});
        m.insert(333, Tag {id: 333, label: String::from("InkNames"), description: String::from("The name of each ink used in a separated image.")});
        m.insert(334, Tag {id: 334, label: String::from("NumberOfInks"), description: String::from("The number of inks.")});
        m.insert(336, Tag {id: 336, label: String::from("DotRange"), description: String::from("The component values that correspond to a 0% dot and 100% dot.")});
        m.insert(337, Tag {id: 337, label: String::from("TargetPrinter"), description: String::from("A description of the printing environment for which this separation is intended.")});
        m.insert(339, Tag {id: 339, label: String::from("SampleFormat"), description: String::from("Specifies how to interpret each data sample in a pixel.")});
        m.insert(340, Tag {id: 340, label: String::from("SMinSampleValue"), description: String::from("Specifies the minimum sample value.")});
        m.insert(341, Tag {id: 341, label: String::from("SMaxSampleValue"), description: String::from("Specifies the maximum sample value.")});
        m.insert(342, Tag {id: 342, label: String::from("TransferRange"), description: String::from("Expands the range of the TransferFunction.")});
        m.insert(343, Tag {id: 343, label: String::from("ClipPath"), description: String::from("Mirrors the essentials of PostScript's path creation functionality.")});
        m.insert(344, Tag {id: 344, label: String::from("XClipPathUnits"), description: String::from("The number of units that span the width of the image, in terms of integer ClipPath coordinates.")});
        m.insert(345, Tag {id: 345, label: String::from("YClipPathUnits"), description: String::from("The number of units that span the height of the image, in terms of integer ClipPath coordinates.")});
        m.insert(346, Tag {id: 346, label: String::from("Indexed"), description: String::from("Aims to broaden the support for indexed images to include support for any color space.")});
        m.insert(347, Tag {id: 347, label: String::from("JPEGTables"), description: String::from("JPEG quantization and/or Huffman tables.")});
        m.insert(351, Tag {id: 351, label: String::from("OPIProxy"), description: String::from("OPI-related.")});
        m.insert(400, Tag {id: 400, label: String::from("GlobalParametersIFD"), description: String::from("Used in the TIFF-FX standard to point to an IFD containing tags that are globally applicable to the complete TIFF file.")});
        m.insert(401, Tag {id: 401, label: String::from("ProfileType"), description: String::from("Used in the TIFF-FX standard, denotes the type of data stored in this file or IFD.")});
        m.insert(402, Tag {id: 402, label: String::from("FaxProfile"), description: String::from("Used in the TIFF-FX standard, denotes the 'profile' that applies to this file.")});
        m.insert(403, Tag {id: 403, label: String::from("CodingMethods"), description: String::from("Used in the TIFF-FX standard, indicates which coding methods are used in the file.")});
        m.insert(404, Tag {id: 404, label: String::from("VersionYear"), description: String::from("Used in the TIFF-FX standard, denotes the year of the standard specified by the FaxProfile field.")});
        m.insert(405, Tag {id: 405, label: String::from("ModeNumber"), description: String::from("Used in the TIFF-FX standard, denotes the mode of the standard specified by the FaxProfile field.")});
        m.insert(433, Tag {id: 433, label: String::from("Decode"), description: String::from("Used in the TIFF-F and TIFF-FX standards, holds information about the ITULAB (PhotometricInterpretation = 10) encoding.")});
        m.insert(434, Tag {id: 434, label: String::from("DefaultImageColor"), description: String::from("Defined in the Mixed Raster Content part of RFC 2301, is the default color needed in areas where no image is available.")});
        m.insert(512, Tag {id: 512, label: String::from("JPEGProc"), description: String::from("Old-style JPEG compression field. TechNote2 invalidates this part of the specification.")});
        m.insert(513, Tag {id: 513, label: String::from("JPEGInterchangeFormat"), description: String::from("Old-style JPEG compression field. TechNote2 invalidates this part of the specification.")});
        m.insert(514, Tag {id: 514, label: String::from("JPEGInterchangeFormatLength"), description: String::from("Old-style JPEG compression field. TechNote2 invalidates this part of the specification.")});
        m.insert(515, Tag {id: 515, label: String::from("JPEGRestartInterval"), description: String::from("Old-style JPEG compression field. TechNote2 invalidates this part of the specification.")});
        m.insert(517, Tag {id: 517, label: String::from("JPEGLosslessPredictors"), description: String::from("Old-style JPEG compression field. TechNote2 invalidates this part of the specification.")});
        m.insert(518, Tag {id: 518, label: String::from("JPEGPointTransforms"), description: String::from("Old-style JPEG compression field. TechNote2 invalidates this part of the specification.")});
        m.insert(519, Tag {id: 519, label: String::from("JPEGQTables"), description: String::from("Old-style JPEG compression field. TechNote2 invalidates this part of the specification.")});
        m.insert(520, Tag {id: 520, label: String::from("JPEGDCTables"), description: String::from("Old-style JPEG compression field. TechNote2 invalidates this part of the specification.")});
        m.insert(521, Tag {id: 521, label: String::from("JPEGACTables"), description: String::from("Old-style JPEG compression field. TechNote2 invalidates this part of the specification.")});
        m.insert(529, Tag {id: 529, label: String::from("YCbCrCoefficients"), description: String::from("The transformation from RGB to YCbCr image data.")});
        m.insert(530, Tag {id: 530, label: String::from("YCbCrSubSampling"), description: String::from("Specifies the subsampling factors used for the chrominance components of a YCbCr image.")});
        m.insert(531, Tag {id: 531, label: String::from("YCbCrPositioning"), description: String::from("Specifies the positioning of subsampled chrominance components relative to luminance samples.")});
        m.insert(532, Tag {id: 532, label: String::from("ReferenceBlackWhite"), description: String::from("Specifies a pair of headroom and footroom image data values (codes) for each pixel component.")});
        m.insert(559, Tag {id: 559, label: String::from("StripRowCounts"), description: String::from("Defined in the Mixed Raster Content part of RFC 2301, used to replace RowsPerStrip for IFDs with variable-sized strips.")});
        m.insert(700, Tag {id: 700, label: String::from("XMP"), description: String::from("XML packet containing XMP metadata")});
        m.insert(32781, Tag {id: 32781, label: String::from("ImageID"), description: String::from("OPI-related.")});
        m.insert(34732, Tag {id: 34732, label: String::from("ImageLayer"), description: String::from("Defined in the Mixed Raster Content part of RFC 2301, used to denote the particular function of this Image in the mixed raster scheme.")});
        m.insert(32932, Tag {id: 32932, label: String::from("Wang Annotation"), description: String::from("Annotation data, as used in 'Imaging for Windows'.")});
        m.insert(33445, Tag {id: 33445, label: String::from("MD FileTag"), description: String::from("Specifies the pixel data format encoding in the Molecular Dynamics GEL file format.")});
        m.insert(33446, Tag {id: 33446, label: String::from("MD ScalePixel"), description: String::from("Specifies a scale factor in the Molecular Dynamics GEL file format.")});
        m.insert(33447, Tag {id: 33447, label: String::from("MD ColorTable"), description: String::from("Used to specify the conversion from 16bit to 8bit in the Molecular Dynamics GEL file format.")});
        m.insert(33448, Tag {id: 33448, label: String::from("MD LabName"), description: String::from("Name of the lab that scanned this file, as used in the Molecular Dynamics GEL file format.")});
        m.insert(33449, Tag {id: 33449, label: String::from("MD SampleInfo"), description: String::from("Information about the sample, as used in the Molecular Dynamics GEL file format.")});
        m.insert(33450, Tag {id: 33450, label: String::from("MD PrepDate"), description: String::from("Date the sample was prepared, as used in the Molecular Dynamics GEL file format.")});
        m.insert(33451, Tag {id: 33451, label: String::from("MD PrepTime"), description: String::from("Time the sample was prepared, as used in the Molecular Dynamics GEL file format.")});
        m.insert(33452, Tag {id: 33452, label: String::from("MD FileUnits"), description: String::from("Units for data in this file, as used in the Molecular Dynamics GEL file format.")});
        m.insert(33550, Tag {id: 33550, label: String::from("ModelPixelScaleTag"), description: String::from("Used in interchangeable GeoTIFF files.")});
        m.insert(33723, Tag {id: 33723, label: String::from("IPTC"), description: String::from("IPTC (International Press Telecommunications Council) metadata.")});
        m.insert(33918, Tag {id: 33918, label: String::from("INGR Packet Data Tag"), description: String::from("Intergraph Application specific storage.")});
        m.insert(33919, Tag {id: 33919, label: String::from("INGR Flag Registers"), description: String::from("Intergraph Application specific flags.")});
        m.insert(33920, Tag {id: 33920, label: String::from("IrasB Transformation Matrix"), description: String::from("Originally part of Intergraph's GeoTIFF tags, but likely understood by IrasB only.")});
        m.insert(33922, Tag {id: 33922, label: String::from("ModelTiepointTag"), description: String::from("Originally part of Intergraph's GeoTIFF tags, but now used in interchangeable GeoTIFF files.")});
        m.insert(34264, Tag {id: 34264, label: String::from("ModelTransformationTag"), description: String::from("Used in interchangeable GeoTIFF files.")});
        m.insert(34377, Tag {id: 34377, label: String::from("Photoshop"), description: String::from("Collection of Photoshop 'Image Resource Blocks'.")});
        m.insert(34665, Tag {id: 34665, label: String::from("Exif IFD"), description: String::from("A pointer to the Exif IFD.")});
        m.insert(34675, Tag {id: 34675, label: String::from("ICC Profile"), description: String::from("ICC profile data.")});
        m.insert(34735, Tag {id: 34735, label: String::from("GeoKeyDirectoryTag"), description: String::from("Used in interchangeable GeoTIFF files.")});
        m.insert(34736, Tag {id: 34736, label: String::from("GeoDoubleParamsTag"), description: String::from("Used in interchangeable GeoTIFF files.")});
        m.insert(34737, Tag {id: 34737, label: String::from("GeoAsciiParamsTag"), description: String::from("Used in interchangeable GeoTIFF files.")});
        m.insert(34853, Tag {id: 34853, label: String::from("GPS IFD"), description: String::from("A pointer to the Exif-related GPS Info IFD.")});
        m.insert(34908, Tag {id: 34908, label: String::from("HylaFAX FaxRecvParams"), description: String::from("Used by HylaFAX.")});
        m.insert(34909, Tag {id: 34909, label: String::from("HylaFAX FaxSubAddress"), description: String::from("Used by HylaFAX.")});
        m.insert(34910, Tag {id: 34910, label: String::from("HylaFAX FaxRecvTime"), description: String::from("Used by HylaFAX.")});
        m.insert(37724, Tag {id: 37724, label: String::from("ImageSourceData"), description: String::from("Used by Adobe Photoshop.")});
        m.insert(40965, Tag {id: 40965, label: String::from("Interoperability IFD"), description: String::from("A pointer to the Exif-related Interoperability IFD.")});
        m.insert(42112, Tag {id: 42112, label: String::from("GDAL_METADATA"), description: String::from("Used by the GDAL library, holds an XML list of name=value 'metadata' values about the image as a whole, and about specific samples.")});
        m.insert(42113, Tag {id: 42113, label: String::from("GDAL_NODATA"), description: String::from("Used by the GDAL library, contains an ASCII encoded nodata or background pixel value.")});
        m.insert(50215, Tag {id: 50215, label: String::from("Oce Scanjob Description"), description: String::from("Used in the Oce scanning process.")});
        m.insert(50216, Tag {id: 50216, label: String::from("Oce Application Selector"), description: String::from("Used in the Oce scanning process.")});
        m.insert(50217, Tag {id: 50217, label: String::from("Oce Identification Number"), description: String::from("Used in the Oce scanning process.")});
        m.insert(50218, Tag {id: 50218, label: String::from("Oce ImageLogic Characteristics"), description: String::from("Used in the Oce scanning process.")});
        m.insert(50706, Tag {id: 50706, label: String::from("DNGVersion"), description: String::from("Used in IFD 0 of DNG files.")});
        m.insert(50707, Tag {id: 50707, label: String::from("DNGBackwardVersion"), description: String::from("Used in IFD 0 of DNG files.")});
        m.insert(50708, Tag {id: 50708, label: String::from("UniqueCameraModel"), description: String::from("Used in IFD 0 of DNG files.")});
        m.insert(50709, Tag {id: 50709, label: String::from("LocalizedCameraModel"), description: String::from("Used in IFD 0 of DNG files.")});
        m.insert(50710, Tag {id: 50710, label: String::from("CFAPlaneColor"), description: String::from("Used in Raw IFD of DNG files.")});
        m.insert(50711, Tag {id: 50711, label: String::from("CFALayout"), description: String::from("Used in Raw IFD of DNG files.")});
        m.insert(50712, Tag {id: 50712, label: String::from("LinearizationTable"), description: String::from("Used in Raw IFD of DNG files.")});
        m.insert(50713, Tag {id: 50713, label: String::from("BlackLevelRepeatDim"), description: String::from("Used in Raw IFD of DNG files.")});
        m.insert(50714, Tag {id: 50714, label: String::from("BlackLevel"), description: String::from("Used in Raw IFD of DNG files.")});
        m.insert(50715, Tag {id: 50715, label: String::from("BlackLevelDeltaH"), description: String::from("Used in Raw IFD of DNG files.")});
        m.insert(50716, Tag {id: 50716, label: String::from("BlackLevelDeltaV"), description: String::from("Used in Raw IFD of DNG files.")});
        m.insert(50717, Tag {id: 50717, label: String::from("WhiteLevel"), description: String::from("Used in Raw IFD of DNG files.")});
        m.insert(50718, Tag {id: 50718, label: String::from("DefaultScale"), description: String::from("Used in Raw IFD of DNG files.")});
        m.insert(50719, Tag {id: 50719, label: String::from("DefaultCropOrigin"), description: String::from("Used in Raw IFD of DNG files.")});
        m.insert(50720, Tag {id: 50720, label: String::from("DefaultCropSize"), description: String::from("Used in Raw IFD of DNG files.")});
        m.insert(50721, Tag {id: 50721, label: String::from("ColorMatrix1"), description: String::from("Used in IFD 0 of DNG files.")});
        m.insert(50722, Tag {id: 50722, label: String::from("ColorMatrix2"), description: String::from("Used in IFD 0 of DNG files.")});
        m.insert(50723, Tag {id: 50723, label: String::from("CameraCalibration1"), description: String::from("Used in IFD 0 of DNG files.")});
        m.insert(50724, Tag {id: 50724, label: String::from("CameraCalibration2"), description: String::from("Used in IFD 0 of DNG files.")});
        m.insert(50725, Tag {id: 50725, label: String::from("ReductionMatrix1"), description: String::from("Used in IFD 0 of DNG files.")});
        m.insert(50726, Tag {id: 50726, label: String::from("ReductionMatrix2"), description: String::from("Used in IFD 0 of DNG files.")});
        m.insert(50727, Tag {id: 50727, label: String::from("AnalogBalance"), description: String::from("Used in IFD 0 of DNG files.")});
        m.insert(50728, Tag {id: 50728, label: String::from("AsShotNeutral"), description: String::from("Used in IFD 0 of DNG files.")});
        m.insert(50729, Tag {id: 50729, label: String::from("AsShotWhiteXY"), description: String::from("Used in IFD 0 of DNG files.")});
        m.insert(50730, Tag {id: 50730, label: String::from("BaselineExposure"), description: String::from("Used in IFD 0 of DNG files.")});
        m.insert(50731, Tag {id: 50731, label: String::from("BaselineNoise"), description: String::from("Used in IFD 0 of DNG files.")});
        m.insert(50732, Tag {id: 50732, label: String::from("BaselineSharpness"), description: String::from("Used in IFD 0 of DNG files.")});
        m.insert(50733, Tag {id: 50733, label: String::from("BayerGreenSplit"), description: String::from("Used in Raw IFD of DNG files.")});
        m.insert(50734, Tag {id: 50734, label: String::from("LinearResponseLimit"), description: String::from("Used in IFD 0 of DNG files.")});
        m.insert(50735, Tag {id: 50735, label: String::from("CameraSerialNumber"), description: String::from("Used in IFD 0 of DNG files.")});
        m.insert(50736, Tag {id: 50736, label: String::from("LensInfo"), description: String::from("Used in IFD 0 of DNG files.")});
        m.insert(50737, Tag {id: 50737, label: String::from("ChromaBlurRadius"), description: String::from("Used in Raw IFD of DNG files.")});
        m.insert(50738, Tag {id: 50738, label: String::from("AntiAliasStrength"), description: String::from("Used in Raw IFD of DNG files.")});
        m.insert(50740, Tag {id: 50740, label: String::from("DNGPrivateData"), description: String::from("Used in IFD 0 of DNG files.")});
        m.insert(50741, Tag {id: 50741, label: String::from("MakerNoteSafety"), description: String::from("Used in IFD 0 of DNG files.")});
        m.insert(50778, Tag {id: 50778, label: String::from("CalibrationIlluminant1"), description: String::from("Used in IFD 0 of DNG files.")});
        m.insert(50779, Tag {id: 50779, label: String::from("CalibrationIlluminant2"), description: String::from("Used in IFD 0 of DNG files.")});
        m.insert(50780, Tag {id: 50780, label: String::from("BestQualityScale"), description: String::from("Used in Raw IFD of DNG files.")});
        m.insert(50784, Tag {id: 50784, label: String::from("Alias Layer Metadata"), description: String::from("Alias Sketchbook Pro layer usage description.")});
        m.insert(33434, Tag {id: 33434, label: String::from("ExposureTime"), description: String::from("Exposure time, given in seconds.")});
        m.insert(33437, Tag {id: 33437, label: String::from("FNumber"), description: String::from("The F number.")});
        m.insert(34850, Tag {id: 34850, label: String::from("ExposureProgram"), description: String::from("The class of the program used by the camera to set exposure when the picture is taken.")});
        m.insert(34852, Tag {id: 34852, label: String::from("SpectralSensitivity"), description: String::from("Indicates the spectral sensitivity of each channel of the camera used.")});
        m.insert(34855, Tag {id: 34855, label: String::from("ISOSpeedRatings"), description: String::from("Indicates the ISO Speed and ISO Latitude of the camera or input device as specified in ISO 12232.")});
        m.insert(34856, Tag {id: 34856, label: String::from("OECF"), description: String::from("Indicates the Opto-Electric Conversion Function (OECF) specified in ISO 14524.")});
        m.insert(36864, Tag {id: 36864, label: String::from("ExifVersion"), description: String::from("The version of the supported Exif standard.")});
        m.insert(36867, Tag {id: 36867, label: String::from("DateTimeOriginal"), description: String::from("The date and time when the original image data was generated.")});
        m.insert(36868, Tag {id: 36868, label: String::from("DateTimeDigitized"), description: String::from("The date and time when the image was stored as digital data.")});
        m.insert(37121, Tag {id: 37121, label: String::from("ComponentsConfiguration"), description: String::from("Specific to compressed data; specifies the channels and complements PhotometricInterpretation")});
        m.insert(37122, Tag {id: 37122, label: String::from("CompressedBitsPerPixel"), description: String::from("Specific to compressed data; states the compressed bits per pixel.")});
        m.insert(37377, Tag {id: 37377, label: String::from("ShutterSpeedValue"), description: String::from("Shutter speed.")});
        m.insert(37378, Tag {id: 37378, label: String::from("ApertureValue"), description: String::from("The lens aperture.")});
        m.insert(37379, Tag {id: 37379, label: String::from("BrightnessValue"), description: String::from("The value of brightness.")});
        m.insert(37380, Tag {id: 37380, label: String::from("ExposureBiasValue"), description: String::from("The exposure bias.")});
        m.insert(37381, Tag {id: 37381, label: String::from("MaxApertureValue"), description: String::from("The smallest F number of the lens.")});
        m.insert(37382, Tag {id: 37382, label: String::from("SubjectDistance"), description: String::from("The distance to the subject, given in meters.")});
        m.insert(37383, Tag {id: 37383, label: String::from("MeteringMode"), description: String::from("The metering mode.")});
        m.insert(37384, Tag {id: 37384, label: String::from("LightSource"), description: String::from("The kind of light source.")});
        m.insert(37385, Tag {id: 37385, label: String::from("Flash"), description: String::from("Indicates the status of flash when the image was shot.")});
        m.insert(37386, Tag {id: 37386, label: String::from("FocalLength"), description: String::from("The actual focal length of the lens, in mm.")});
        m.insert(37396, Tag {id: 37396, label: String::from("SubjectArea"), description: String::from("Indicates the location and area of the main subject in the overall scene.")});
        m.insert(37500, Tag {id: 37500, label: String::from("MakerNote"), description: String::from("Manufacturer specific information.")});
        m.insert(37510, Tag {id: 37510, label: String::from("UserComment"), description: String::from("Keywords or comments on the image; complements ImageDescription.")});
        m.insert(37520, Tag {id: 37520, label: String::from("SubsecTime"), description: String::from("A tag used to record fractions of seconds for the DateTime tag.")});
        m.insert(37521, Tag {id: 37521, label: String::from("SubsecTimeOriginal"), description: String::from("A tag used to record fractions of seconds for the DateTimeOriginal tag.")});
        m.insert(37522, Tag {id: 37522, label: String::from("SubsecTimeDigitized"), description: String::from("A tag used to record fractions of seconds for the DateTimeDigitized tag.")});
        m.insert(40960, Tag {id: 40960, label: String::from("FlashpixVersion"), description: String::from("The Flashpix format version supported by a FPXR file.")});
        m.insert(40961, Tag {id: 40961, label: String::from("ColorSpace"), description: String::from("The color space information tag is always recorded as the color space specifier.")});
        m.insert(40962, Tag {id: 40962, label: String::from("PixelXDimension"), description: String::from("Specific to compressed data; the valid width of the meaningful image.")});
        m.insert(40963, Tag {id: 40963, label: String::from("PixelYDimension"), description: String::from("Specific to compressed data; the valid height of the meaningful image.")});
        m.insert(40964, Tag {id: 40964, label: String::from("RelatedSoundFile"), description: String::from("Used to record the name of an audio file related to the image data.")});
        m.insert(41483, Tag {id: 41483, label: String::from("FlashEnergy"), description: String::from("Indicates the strobe energy at the time the image is captured, as measured in Beam Candle Power Seconds")});
        m.insert(41484, Tag {id: 41484, label: String::from("SpatialFrequencyResponse"), description: String::from("Records the camera or input device spatial frequency table and SFR values in the direction of image width, image height, and diagonal direction, as specified in ISO 12233.")});
        m.insert(41486, Tag {id: 41486, label: String::from("FocalPlaneXResolution"), description: String::from("Indicates the number of pixels in the image width (X) direction per FocalPlaneResolutionUnit on the camera focal plane.")});
        m.insert(41487, Tag {id: 41487, label: String::from("FocalPlaneYResolution"), description: String::from("Indicates the number of pixels in the image height (Y) direction per FocalPlaneResolutionUnit on the camera focal plane.")});
        m.insert(41488, Tag {id: 41488, label: String::from("FocalPlaneResolutionUnit"), description: String::from("Indicates the unit for measuring FocalPlaneXResolution and FocalPlaneYResolution.")});
        m.insert(41492, Tag {id: 41492, label: String::from("SubjectLocation"), description: String::from("Indicates the location of the main subject in the scene.")});
        m.insert(41493, Tag {id: 41493, label: String::from("ExposureIndex"), description: String::from("Indicates the exposure index selected on the camera or input device at the time the image is captured.")});
        m.insert(41495, Tag {id: 41495, label: String::from("SensingMethod"), description: String::from("Indicates the image sensor type on the camera or input device.")});
        m.insert(41728, Tag {id: 41728, label: String::from("FileSource"), description: String::from("Indicates the image source.")});
        m.insert(41729, Tag {id: 41729, label: String::from("SceneType"), description: String::from("Indicates the type of scene.")});
        m.insert(41730, Tag {id: 41730, label: String::from("CFAPattern"), description: String::from("Indicates the color filter array (CFA) geometric pattern of the image sensor when a one-chip color area sensor is used.")});
        m.insert(41985, Tag {id: 41985, label: String::from("CustomRendered"), description: String::from("Indicates the use of special processing on image data, such as rendering geared to output.")});
        m.insert(41986, Tag {id: 41986, label: String::from("ExposureMode"), description: String::from("Indicates the exposure mode set when the image was shot.")});
        m.insert(41987, Tag {id: 41987, label: String::from("WhiteBalance"), description: String::from("Indicates the white balance mode set when the image was shot.")});
        m.insert(41988, Tag {id: 41988, label: String::from("DigitalZoomRatio"), description: String::from("Indicates the digital zoom ratio when the image was shot.")});
        m.insert(41989, Tag {id: 41989, label: String::from("FocalLengthIn35mmFilm"), description: String::from("Indicates the equivalent focal length assuming a 35mm film camera, in mm.")});
        m.insert(41990, Tag {id: 41990, label: String::from("SceneCaptureType"), description: String::from("Indicates the type of scene that was shot.")});
        m.insert(41991, Tag {id: 41991, label: String::from("GainControl"), description: String::from("Indicates the degree of overall image gain adjustment.")});
        m.insert(41992, Tag {id: 41992, label: String::from("Contrast"), description: String::from("Indicates the direction of contrast processing applied by the camera when the image was shot.")});
        m.insert(41993, Tag {id: 41993, label: String::from("Saturation"), description: String::from("Indicates the direction of saturation processing applied by the camera when the image was shot.")});
        m.insert(41994, Tag {id: 41994, label: String::from("Sharpness"), description: String::from("Indicates the direction of sharpness processing applied by the camera when the image was shot.")});
        m.insert(41995, Tag {id: 41995, label: String::from("DeviceSettingDescription"), description: String::from("This tag indicates information on the picture-taking conditions of a particular camera model.")});
        m.insert(41996, Tag {id: 41996, label: String::from("SubjectDistanceRange"), description: String::from("Indicates the distance to the subject.")});
        m.insert(42016, Tag {id: 42016, label: String::from("ImageUniqueID"), description: String::from("Indicates an identifier assigned uniquely to each image.")});
        m.insert(0, Tag {id: 0, label: String::from("GPSVersionID"), description: String::from("Indicates the version of GPSInfoIFD.")});
        m.insert(1, Tag {id: 1, label: String::from("GPSLatitudeRef"), description: String::from("Indicates whether the latitude is north or south latitude.")});
        m.insert(2, Tag {id: 2, label: String::from("GPSLatitude"), description: String::from("Indicates the latitude.")});
        m.insert(3, Tag {id: 3, label: String::from("GPSLongitudeRef"), description: String::from("Indicates whether the longitude is east or west longitude.")});
        m.insert(4, Tag {id: 4, label: String::from("GPSLongitude"), description: String::from("Indicates the longitude.")});
        m.insert(5, Tag {id: 5, label: String::from("GPSAltitudeRef"), description: String::from("Indicates the altitude used as the reference altitude.")});
        m.insert(6, Tag {id: 6, label: String::from("GPSAltitude"), description: String::from("Indicates the altitude based on the reference in GPSAltitudeRef.")});
        m.insert(7, Tag {id: 7, label: String::from("GPSTimeStamp"), description: String::from("Indicates the time as UTC (Coordinated Universal Time).")});
        m.insert(8, Tag {id: 8, label: String::from("GPSSatellites"), description: String::from("Indicates the GPS satellites used for measurements.")});
        m.insert(9, Tag {id: 9, label: String::from("GPSStatus"), description: String::from("Indicates the status of the GPS receiver when the image is recorded.")});
        m.insert(10, Tag {id: 10, label: String::from("GPSMeasureMode"), description: String::from("Indicates the GPS measurement mode.")});
        m.insert(11, Tag {id: 11, label: String::from("GPSDOP"), description: String::from("Indicates the GPS DOP (data degree of precision).")});
        m.insert(12, Tag {id: 12, label: String::from("GPSSpeedRef"), description: String::from("Indicates the unit used to express the GPS receiver speed of movement.")});
        m.insert(13, Tag {id: 13, label: String::from("GPSSpeed"), description: String::from("Indicates the speed of GPS receiver movement.")});
        m.insert(14, Tag {id: 14, label: String::from("GPSTrackRef"), description: String::from("Indicates the reference for giving the direction of GPS receiver movement.")});
        m.insert(15, Tag {id: 15, label: String::from("GPSTrack"), description: String::from("Indicates the direction of GPS receiver movement.")});
        m.insert(16, Tag {id: 16, label: String::from("GPSImgDirectionRef"), description: String::from("Indicates the reference for giving the direction of the image when it is captured.")});
        m.insert(17, Tag {id: 17, label: String::from("GPSImgDirection"), description: String::from("Indicates the direction of the image when it was captured.")});
        m.insert(18, Tag {id: 18, label: String::from("GPSMapDatum"), description: String::from("Indicates the geodetic survey data used by the GPS receiver.")});
        m.insert(19, Tag {id: 19, label: String::from("GPSDestLatitudeRef"), description: String::from("Indicates whether the latitude of the destination point is north or south latitude.")});
        m.insert(20, Tag {id: 20, label: String::from("GPSDestLatitude"), description: String::from("Indicates the latitude of the destination point.")});
        m.insert(21, Tag {id: 21, label: String::from("GPSDestLongitudeRef"), description: String::from("Indicates whether the longitude of the destination point is east or west longitude.")});
        m.insert(22, Tag {id: 22, label: String::from("GPSDestLongitude"), description: String::from("Indicates the longitude of the destination point.")});
        m.insert(23, Tag {id: 23, label: String::from("GPSDestBearingRef"), description: String::from("Indicates the reference used for giving the bearing to the destination point.")});
        m.insert(24, Tag {id: 24, label: String::from("GPSDestBearing"), description: String::from("Indicates the bearing to the destination point.")});
        m.insert(25, Tag {id: 25, label: String::from("GPSDestDistanceRef"), description: String::from("Indicates the unit used to express the distance to the destination point.")});
        m.insert(26, Tag {id: 26, label: String::from("GPSDestDistance"), description: String::from("Indicates the distance to the destination point.")});
        m.insert(27, Tag {id: 27, label: String::from("GPSProcessingMethod"), description: String::from("A character string recording the name of the method used for location finding.")});
        m.insert(28, Tag {id: 28, label: String::from("GPSAreaInformation"), description: String::from("A character string recording the name of the GPS area.")});
        m.insert(29, Tag {id: 29, label: String::from("GPSDateStamp"), description: String::from("A character string recording date and time information relative to UTC (Coordinated Universal Time).")});
        m.insert(30, Tag {id: 30, label: String::from("GPSDifferential"), description: String::from("Indicates whether differential correction is applied to the GPS receiver.")});
        m
    };
}
